#!/usr/bin/env python
from __future__ import print_function
from utils import print_error
import sys
import re

commit_message_pattern = re.compile("^(.+?)Issue(?:[-:\s]*)(.+?)(?:Reviewer(?:[-:\s]*)(.+?))?$", re.IGNORECASE | re.DOTALL)
reverse_commit_message_pattern = re.compile("^Revert \".*\"$")
merge_commit_message_pattern = re.compile("^Merge (commit|branch|remote-tracking branch|pull request) .*")

with open(sys.argv[1], "r+") as message_file:
	message = message_file.read()

	is_jira_commit_message = commit_message_pattern.match(message)
	is_reverse_commit_message = reverse_commit_message_pattern.match(message)
	is_merge_commit_message = merge_commit_message_pattern.match(message)

	if is_jira_commit_message:
		commit_message_chunks = commit_message_pattern.findall(message)[0]
		contains_newlines = "\n" in message
		message = commit_message_chunks[0].strip()
		message = message[0].upper() + message[1:] + ("" if message.endswith(".") else ".")
		issue = commit_message_chunks[1].strip()
		issue = issue[0].upper() + issue[1:] + ("" if issue.endswith(".") else ".")
		reviewer = commit_message_chunks[2].strip()
		if reviewer:
			reviewer = reviewer + ("" if reviewer.endswith(".") else ".")

		message_file.seek(0)
		if not reviewer:
			if contains_newlines:
				message_file.write("%s\nIssue: %s" % (message, issue))
			else:
				message_file.write("%s Issue: %s" % (message, issue))
		else:
			if contains_newlines:
				message_file.write("%s\nIssue: %s\nReviewer %s" % (message, issue, reviewer))
			else:
				message_file.write("%s Issue: %s Reviewer %s" % (message, issue, reviewer))
		message_file.truncate()
	elif is_reverse_commit_message or is_merge_commit_message:
		pass
	else:
		print_error("[ERROR] All commit messages must be in one of the following formats...\n\t<message> Issue: <issue> [Reviewer: <reviewer>]")
		sys.exit(1)
